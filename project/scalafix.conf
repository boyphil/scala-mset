rules = [
  Disable
  DisableSyntax
  ExplicitResultTypes
  LeakingImplicitClassVal
  MissingFinal
  RemoveUnusedImports
  RemoveUnusedTerms
]

Disable.symbols = [
  "scala.Any.asInstanceOf"
  "scala.Any.isInstanceOf"
  "scala.util.Either.LeftProjection.get"
  "scala.util.Either.RightProjection.get"
  "scala.util.Try.get"
  "scala.Option.get"
  "scala.Enumeration"
  "scala.collection.mutable"

  # don't get excited, see https://github.com/scalacenter/scalafix/pull/634
  "java.lang.Object.equals"
  "java.lang.Object.eq"
  "java.lang.Object.ne"
  "java.lang.Object.hashCode"
  "java.lang.Object.toString"
  #"java.lang.Object#`==`"
  "java.lang.Object#`##`"
]

Disable.ifSynthetic = [
  "java.io.Serializable"
  "scala.Any"
  "scala.Any.asInstanceOf"
  "scala.Any.isInstanceOf"
  "scala.AnyRef"
  # "scala.AnyVal"
  # "scala.Nothing"
  "scala.Option.option2Iterable"
  "scala.Predef.any2stringadd"
  "scala.Product"
]

Disable.unlessInside = [
    {
        # https://github.com/scalacenter/scalafix/issues/649
        #safeBlock = "scalaz.effect.IO.apply"
        safeBlock = "std.IO"
        symbols = [
          "scala.Predef.println"
          "java.lang.System.currentTimeMillis"
          "scala.io"
          "java.io"
        ]
    }
]

DisableSyntax.keywords = [
  var
  null
  return
  throw
  while
]
DisableSyntax.noSemicolons = true
DisableSyntax.noXml = true
DisableSyntax.noCovariantTypes = true
DisableSyntax.noContravariantTypes = true
DisableSyntax.noValInAbstract = true
DisableSyntax.noImplicitObject = true
DisableSyntax.noImplicitConversion = true

# DisableSyntax.regex = [
#   {
#     id = "redundant"
#     pattern = "Type"
#     message = "That's a really bad name."
#   }
# ]

ExplicitResultTypes {
  unsafeShortenNames = true

  # these apply to non-implicits
  memberKind = [Def, Val, Var]
  memberVisibility = [Public, Protected]

  # turn to the max...
  skipSimpleDefinitions = false
  skipLocalImplicits = false
}
